{"version":3,"sources":["components/NavComponent/Nav.js","axios.js","Requests.js","components/BannerComponent/Banner.js","components/RowComponent/Row.js","components/HomescreenComponent/HomeScreen.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substring","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ba4ba67.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"./Nav.css\";\n\nfunction Nav() {\n\n    const [show, handleShow] = useState(false);\n\n    const transitionNavbar = () => {\n        if(window.scrollY > 100) {\n            handleShow(true);\n        } else {\n            handleShow(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", transitionNavbar);\n        return () => {\n            window.removeEventListener(\"scroll\", transitionNavbar);\n        }\n    }, [])\n\n    return(\n        <div className={`nav ${show && 'nav__black'}`}>\n            <div className=\"nav__contents\">\n                <img className=\"nav__logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n                <img className=\"nav__avatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\n            </div>\n        </div>\n    \n    )\n}\n\nexport default Nav;","import axios from 'axios';\n\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","const API_KEY = \"7b9fe37fa22d366b0681c8db4824da86\";\n\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\n\nexport default requests;\n\n// https://api.themoviedb.org/3/discover/tv?api_key=7b9fe37fa22d366b0681c8db4824da86&with_networks=213","import React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from '../../axios';\nimport requests from '../../Requests';\n\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n\n        fetchData();\n        \n    }, []);\n\n    console.log(movie);\n\n    const truncate = (string,n) => {\n        return string?.length > 150 ? string.substring(0,n-1) + '...' : string;\n    }\n\n    return (\n        <header className=\"banner\" style={{\n            backgroundSize : \"cover\",\n            backgroundImage : `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n            backgroundPosition : \"center center\"\n        }}>\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <h1 className=\"banner__description\">\n                {truncate(movie?.overview, 150)}\n\n                </h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My list</button>\n                </div>\n                \n            </div>\n            <div className=\"banner--fadeBottom\" />\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react';\nimport axios from '../../axios';\nimport \"./Row.css\";\n\nfunction Row({title, fetchUrl, isLargeRow = false}) {\n    \n    const [movies, setMovies] = useState([]);\n\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    },[fetchUrl]);\n\n    console.log(movies);\n\n    return (\n        <div className=\"all__movies\">\n            <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n\n                {movies.map((movie) => {\n                    return (((isLargeRow && movie.poster_path) || \n                     (!isLargeRow && movie.backdrop_path)) &&\n                     (<img key={movie.id} className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\n                    }`}\n                    alt={movie.name}\n                    />))\n                })};\n            </div>\n\n         \n\n        </div>\n        </div>\n      \n    )\n}\n\nexport default Row\n","import React from 'react';\nimport Nav from '../NavComponent/Nav';\nimport Banner from '../BannerComponent/Banner';\nimport requests from '../../Requests';\nimport Row from '../RowComponent/Row';\n\nfunction HomeScreen() {\n    return (\n        <div>\n            {/* Nav */}\n            <Nav />\n\n            {/* Banner */}\n            <Banner />\n\n            {/* Row */}\n            <Row title=\"Netflix Originals\"\n                 fetchUrl={requests.fetchNetflixOriginals}\n                 isLargeRow\n            />\n            <Row title=\"Trending\"\n                 fetchUrl={requests.fetchTrending}\n            />\n            <Row title=\"Top Rated\"\n                 fetchUrl={requests.fetchTrending}\n            />\n            <Row title=\"Action Movies\"\n                 fetchUrl={requests.fetchActionMovies}\n            />\n            <Row title=\"Comedy Movies\"\n                 fetchUrl={requests.fetchComedyMovies}\n            />\n            <Row title=\"Horror Movie\"\n                 fetchUrl={requests.fetchHorrorMovies}\n            />\n            <Row title=\"Romance Movie\"\n                 fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row title=\"Documentaries\"\n                 fetchUrl={requests.fetchDocumentaries}\n            />\n\n\n        </div>\n    )\n}\n\nexport default HomeScreen;\n","import React from 'react';\nimport './App.css';\nimport HomeScreen from './components/HomescreenComponent/HomeScreen';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/*Home Screen*/}\n      <HomeScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}