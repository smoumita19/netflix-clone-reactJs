{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: null\n}; //Pushing the user slice into the global store \n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated `actions`\n  reducers: {\n    login: (state, action) => {\n      state.value = action.payload;\n    },\n    logout: state => {\n      state.value = null;\n    }\n  }\n}); //to access this out of the global store\n\nexport const {\n  login,\n  logout\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectUser = state => state.user.value;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/moumitasen/Projects/react-projects/netflix-clone/src/features/userSlice.js"],"names":["createSlice","initialState","value","userSlice","name","reducers","login","state","action","payload","logout","actions","selectUser","user","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB,C,CAIA;;AACA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnC;AACAI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtBD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,KAHO;AAIRC,IAAAA,MAAM,EAAGH,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH;AANO;AAJyB,CAAD,CAA7B,C,CAeP;;AACA,OAAO,MAAM;AAAEI,EAAAA,KAAF;AAASI,EAAAA;AAAT,IAAoBP,SAAS,CAACQ,OAApC,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAIL,KAAD,IAAWA,KAAK,CAACM,IAAN,CAAWX,KAAzC;AAGP,eAAeC,SAAS,CAACW,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    value: null,\n  };\n\n//Pushing the user slice into the global store \nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated `actions`\n  reducers: {\n    login: (state, action) => {\n        state.value = action.payload;\n    },\n    logout: (state) => {\n        state.value = null;\n    },\n  },\n \n});\n\n//to access this out of the global store\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.value;\n\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}